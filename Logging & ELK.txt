
=====================
Spring Boot Logging
=====================

-> Logging is the process of storing application execution details into a file.

-> Logging will help us in understanding application execution flow.

-> Logging will help us in identifying exceptions occured in the application.


Note: Logging is used to understand runtime behaviour of the application.

=======================
Logging Architecture
=======================

1) Logger : It is a class which is providing methods to generate log messages

2) Layout: It represents log msg format

3) Appender : It represents destination to write the log msg (console/file)


===========
Log Levels
===========

			TRACE  >  DEBUG   >   INFO   >   WARN   >  ERROR


=> The default Log level in springboot is INFO

=> From the current log level all higher level logs also will be printed.



==============
File Appender
==============

=> File Appender is used to write log msgs to log file

=> To configure log file we can use below property

			logging.file.name=myapp.log

Note: Applictaion will generate all logs to single log file. Over a period of time the log file size will become very big and it is very difficult to open and read log msgs.


=> To overcome this problem we will use "Rolling File Appenders" in realtime.

=======================
Logging with Rolling
=======================

=> Instead of writing all log msgs to single log file, we need to create multiple logs files to store application logs.

=> To create multiple logs we have below 2 approaches.

			1) Time Based Rolling (Create New Log file everday)

			2) Size Based Rolling (Create new log file after reaching given limit)

=============
logback.xml
=============

=> Spring Boot internally uses logback framework for logging.

=> To customize logging configuration we can create logback.xml in our project.


<configuration>	
	<appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d [%thread] %-5level %-50logger{40} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="RollingFile"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>MyApp.log</file>
		<encoder>
			<pattern>%d [%thread] %-5level %-50logger{40} - %msg%n</pattern>
		</encoder>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>MyApp-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>1MB</maxFileSize>
			<maxHistory>30</maxHistory>
			<totalSizeCap>10MB</totalSizeCap>
		</rollingPolicy>
	</appender>
	
	<root level="INFO">
		<appender-ref ref="Console" />
		<appender-ref ref="RollingFile" />
	</root>
</configuration>


============
ELK Stack
============

=> ELK is the combination of 3 open source products

1) Elastic Search   : It is used to store and process logs

2) Logstash  : It is used to collect application logs and store in Elastic Search

3) Kibana : It will provide user interface to monitor application logs

=> By using the above 3 products we can implement Log Aggregation and Logs Monitoring


===========
ELK Setup
===========

1) Download ELK Softwares

		=>  Elastic Search : https://www.elastic.co/downloads/elasticsearch

		=>  Kibana : https://www.elastic.co/downloads/kibana

		=>  Logstash : https://www.elastic.co/downloads/logstash

2) Extract all zip files 

3) Run elasticsearch using elasticsearch.bat file (make sure all security settings disable in elasticsearch.yml before running)

		$ elasticsearch.bat

4) Check Elastic Search Running or not (URL  : http://localhost:9200/ )

5) Run kibana using kibana.bat file (before running kibana, enable elasticsearch url in kibana.yml file)

		$ kibana.bat

6) Check Kibana running or not ( URL : http://localhost:5601/app/home )

7) Run Spring Boot Application and generate log file with log messages

8) create logstash.conf file like below 

# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  file {
	path => "C:/Users/ashok/classes/22-JRTP/workspace/SpringBoot_REST_API/app.log"
	start_position => "beginning"
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
  }
}

9) Run logstash server using below command 

$ logstash -f logstash-sample.conf

10) Check logstash server is running or not ( http://localhost:9600 )


11) Check application logs in Kibana dashboard