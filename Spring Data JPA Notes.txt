===============
Spring Data JPA
===============

-> It is used to develop persistence logic in our application.

-> The logic which is responsible to communicate with database is called as Persistence Logic.

-> Already we have JDBC, Spring JDBC, Hibernate, Spring ORM to develop persistence logic

-> If we use JDBC,or Spring JDBC or Hibernate or Spring ORM then we should common logics in all DAO classes to perform CURD Operations

-> Data JPA simplified persistence logic development by providing pre-defined interfaces with methods

-> Data JPA provided Repositories to perform CURD operations

Note: If we use Data JPA then we don't need to write logic to perform curd operations bcz Data JPA will take care of that.

-> Data JPA provideed Repository interfaces to perform CURD operations

	1) CrudRepository  (Methods to perform Crud Operations)

	2) JpaRepository (Methods to perform Crud Operations + Pagination + Sorting + QBE)


=======================
Hibernate Vs Data JPA
=======================

-> In Hibernate we should implement all methods to perform CRUD operations
-> Data JPA providing predefined methods to perform CRUD Operations

-> In Hibernate we should write boiler plate code (same code in multiple classes)
-> In Data JPA we don't need to write any method because JPA Repositories providing methods for us

===================
Environment Setup
===================

1) MySQL Database (Server s/w)   (https://dev.mysql.com/downloads/installer/)
2) MySQL  Workbench (Client s/w) (https://dev.mysql.com/downloads/workbench/)

SQL Developer for Oracle DB : https://www.oracle.com/database/sqldeveloper/technologies/download/

=====================
MySQL Database Setup
=====================

=> Connect with Mysql DB server using Workbench

=> Execute below commands to setup database for our applications development

create database sbms33;
use sbms33;
show tables;

===================
MySQL DB Properties
===================

spring.datasource.url=jdbc:mysql://localhost:3306/sbms33
spring.datasource.username=ashokit
spring.datasource.password=AshokIT@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true





===================
Entity Class
===================

-> The java class which is mapped with DB table is called as Entity class

-> To map java class with DB table we will use below annotations


@Entity : It represents our class as Entity class. (It is mandatory annotation)

@Table : It is used to map our class with DB Table name

Note : @Table is optional if our class name and table is same. If we don't give @Table then it will consider class name as table name.

@Id : It represents variable mapping with primary column in table (It is mandatory annotation)

@Column : It is used to map our class variables with DB table column names

Note: @Column is optional if class variable name and DB table column names are same. If we don't give @Column then it will consider variable name as column name.


Note: For every table we should create one Entity class. Entity class represents  DB operations should be performed in which table.


@Entity
@Table(name="CRICKET_PLAYERS")
public class Player {

	@Id
	@Column(name="PLAYER_ID")
	private Integer playerId;

	@Column(name="PLAYER_NAME")
	private String playerName;

	@Column(name="PLAYER_AGE")
	private Integer playerAge;

	@Column(name="LOCATION")
	private String location;
}



Note: One entity class will be mapped with only one DB table.


======================
Repository Interfaces
======================

-> JPA provided repository interfaces to perform Curd Operations

-> For Every DB table we will create one Repository interface by extending Jpa Repository


Syntax: 
---------
public interface PlayerRepository extends CrudRepository<Entity, ID>{
}

Example
-----------
public interface PlayerRepository extends CrudRepository<Player, Serializable>{
}

Note: When our interface extending properties from JPA Repository interfaces then JPA will provide implementation for our interface in Runtime using Proxy Design Pattern.


===================
Datasource properties
===================

-> Datasource properties represents with which database we want connect

				- DB URL
				- DB Uname
				- DB Pwd
				- DB Driver Class


-> We will configure datasource properties in application.properties file or application.yml file

spring.datasource.url=jdbc:mysql://localhost:3306/sbms
spring.datasource.username=ashokit
spring.datasource.password=AshokIT@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver


===================
ORM Properties
===================

-> Hibernate provided some additional benefits while developing persistence logic

-> Tables can be created dynamically  using "auto-ddl" property

-> We are calling JPA methods to perform DB operations. Those methods will generate queries to execute. To print those queries on console we can use 'show-sql' property



==========================
Build First App using Data JPA
==========================

1) Create spring boot application with below dependencies

		a) starter-data-jpa
		b) mysql-connector

2) Create Entity class using Annotations

3) Create Repository interface by extending CrudRepository

4) Configure DataSource & ORM properties in application.properties file

5) Call Repository methods in start class to perform DB operations


=====================
CrudRepository methods
=====================

1) save (. )  :: upsert method ( insert and update ) - for one record

2)  saveAll  ( ..) :: upsert method (insert and update) - for multiple records

3) findById (. ) :: To retrieve single record using primary key

4) findAllById ( ..) :: To retrieve multiple records using primary keys

5) findAll  ( ) :: To retrieve all records from table

6) count ( ) :: To get total records count

7) existsById  (. ) : To check record presence in table using Primary key

8) deleteById (. ) : To delete single record using primary key

9) deleteAllById (.. ) : To delete multiple records using primary keys

10) delete(. ) : To delete record using entity object

11) deleteAll  (.. ) : To delete all records from table with given entities

12) deleteAll ( ) : To delete all records

------------------------------------------------------------------------------------------------------------------------------------------------------------------
@Entity
@Table(name = "USER_MASTER")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {

	@Id
	@Column(name = "USER_ID")
	private Integer userid;

	@Column(name = "USER_NAME")
	private String username;

	@Column(name = "USER_GENDER")
	private String gender;

	@Column(name = "USER_AGE")
	private Integer age;

	@Column(name = "USER_COUNTRY")
	private String country;

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
public interface UserRepository extends CrudRepository<User, Integer> {

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

@SpringBootApplication
public class Application {
	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);

		UserRepository repository = context.getBean(UserRepository.class);

		/*User u1 = new User(101, "Ramu", "Male", 25, "India");

		repository.save(u1);*/

		/*User u2 = new User(102, "Raju", "Male", 26, "India");
		User u3 = new User(103, "John", "Male", 30, "USA");
		User u4 = new User(104, "Smith", "Male", 32, "Canada");

		repository.saveAll(Arrays.asList(u2, u3, u4));*/
		
		/*Optional<User> findById = repository.findById(103);
		if(findById.isPresent()) {
			System.out.println(findById.get());
		}*/
		
		/*Iterable<User> allById = repository.findAllById(Arrays.asList(101,102,103));
		allById.forEach(user -> {
			System.out.println(user);
		});*/
		
		/*Iterable<User> findAll = repository.findAll();
		findAll.forEach(user -> {
			System.out.println(user);
		});*/
		
		/*long count = repository.count();
		System.out.println("Total Records in table :: "+ count);*/
		
		/*boolean existsById = repository.existsById(101);
		System.out.println("Record Presence with id - 101 :: " + existsById);*/
		
		//repository.deleteById(104);
		
		repository.deleteAllById(Arrays.asList(102,103));
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
spring.datasource.url=jdbc:mysql://localhost:3306/sbms
spring.datasource.username=ashokit
spring.datasource.password=AshokIT@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver


spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

-> In CrudRepository interface we have methods to retrieve records

		1) findById (ID)  ----> to retrieve based on primary key

		2) findAllById(Iterable<ID> ids) ----> to retrieve based on multiple primary keys

		3) findAll( ) -----> to retrieve all records


Requirement -1 :  Retrieve users records who are belongs to INDIA

		SQL : select * from user_master where user_country='INDIA';


Requirement -2 : Retrieve users whose age is below 30 years

		SQL : select * from user_master where user_age >=30;


Note: user_age and user_country are non-primary columns in the table

-> To retrieve data based on Non-Primary key columns we don't have pre-defined methods. 
To implement these kind of requirements in Data JPA we have below 2 options

1) findby methods

2) custom queries

===================
Find By Methods
===================

-> Find By Methods are used to construct queries based on method name

-> Method Name is very important to prepare query dynamically

-> Based on our method name, JPA will prepare the query in Runtime and it will execute that query

Syntax :   findby+entityClassVariableName (parameters ...)

Note: findBy methods we will write in Repository interface ( abstract methods )

Ex: Retrieve user data based on country_name

	findByCountry(String countryname);

Ex : Retrieve user data based on user_age

	findByAge(Integer age);


Note: findbyXXX methods are used for only Retrieval (SELECT ) operation.


++++++++++++++++++++++++++++++++ FindBy Methods Examples++++++++++++++++++++++++++++++++++++++++++++++++++

public interface UserRepository extends CrudRepository<User, Integer> {

	// select * from user_master where user_country=?;
	public List<User> findByCountry(String cname);

	// select * from user_master where user_age=?;
	public List<User> findByAge(Integer age);

	// select * from user_master where user_age >= ?;
	public List<User> findByAgeGreaterThanEqual(Integer age);

	//select * from user_master where user_country in (?,?,? ...);
	public List<User> findByCountryIn(List<String> countries);

	// select * from user_master where user_country='India' and user_age=25;
	public List<User> findByCountryAndAge(String cname, Integer age);

	// select * from user_master where user_country='India' and user_age=25 and user_gender='Male';
	public List<User> findByCountryAndAgeAndGender(String cname, Integer age, String gender);
}

===================
Custom Queries
===================

-> We can write our own query and we can execute that query using JPA that is called as Custom Query

-> Custom Queries we can write in 2 ways

		1) HQL Queries

		2) Native SQL Queries

===================
Native SQL Vs HQL
===================

-> Native SQL queries are DB dependent
-> HQL Queries are DB in-dependent

-> Native Queries will use table name and column names in the query directley
-> HQL queris will use 'Entity Class Name' and 'Entity Class Variable Names' in the query

-> Native SQL queries will execute in Database Directley
-> HQL queries can't execute in DB directley (HQL queries will be converted to SQL query using Dialect class before execution)

Note: In Hibernate we have Dialect classes for every database

-> As SQL queries are executing directley in DB hence performance wise they are good. HQL queries should be converted before execution hence HQL queries will take more time than SQL queries for execution.


-> Performance wise SQL queries are good
-> Maintenence wise HQL queies are good


# Retrieve all records from table

SQL : SELECT * FROM USER_MASTER

HQL :  From User

# Retrieve all records of users who are belongs to country 'India'

SQL : SELECT * FROM USER_MASTER WHERE USER_COUNTRY = 'INDIA'

HQL : From User where country='India'

# Retrieve users who are belongs to 'India' and age is 25

SQL : SELECT * FROM USER_MASTER where USER_COUNTRY='INDIA' AND USER_AGE = 25

HQL : From User where country='India' and age = 25

# Retrieve User ID and User Name based on User Country

SQL : select user_id, user_name from User_master where user_country='India';

HQL : select userid, username from User where country='India'


Note: If we don't have projection then we can start HQL query with 'FROM' keyword. If we have projection then we need to start with 'SELECT' keyword

Note: Projection means retriving specific columns data from the table


-> To write custom queries we will use @Query annotation in Repository interface


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
public interface UserRepository extends CrudRepository<User, Integer> {

	@Query(value = "From User")
	public List<User> getAllUsersHql();

	@Query(value = "select * from user_master", nativeQuery = true)
	public List<User> getAllUsersSql();

	@Query(value = "From User where country=:cname")
	public List<User> getAllUsersByCountry(String cname);

	@Query(value = "From User where country=:cname and age=:age")
	public List<User> getAllUsersByCountryAndAge(String cname, Integer age);

}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


We can perform DB operations using Data JPA in below 3 ways

1) Predefined methods

2) findByXXX methods

3) Custom Queries ( @ Query )



===================
JpaRepository
===================

-> It is a predefined interface available in data jpa

-> Using JpaRepository interface also we can perform CRUD operations with DB tables

-> JpaRepository also having several methods to perform CRUD operations

-> JpaRepository having support for Pagination + Sorting + QBE (Query By Example)


Note: CrudRepository interface doesn't support Pagination + Sorting + QBE


Sorting
++++++++
-> Sorting is used to sort the records either in ascending or in descending order

-> We can pass Sort object as parameter for findAll ( ) method like below

		List<User> users = repository.findAll();
		List<User> users = repository.findAll(Sort.by("age").ascending());
		List<User> users = repository.findAll(Sort.by("username","age").descending());
		
		users.forEach(user -> {
			System.out.println(user);
		});


===================
Pagination
===================
-> The process of dividing all the records into multiple pages is called as Pagination

-> If we retrieve all the records at once then performance issues we will get in the application

-> When we have lot of data in table to display then we will divide those records into multiple pages and we will display in front-end

-> Data will be displayed based on below 2 conditions


		=> PAGE NUMBER (User landed on which page) 

		=> PAGE SIZE   (How many records should be displayed in single page)


		int pageSize = 5;
		int pageNo  = 1;
		
		PageRequest pageRequest = PageRequest.of(pageNo-1, pageSize);

		Page<User> pageData = repository.findAll(pageRequest);
		
		int totalPages = pageData.getTotalPages();
		System.out.println("Total Pages :: "+ totalPages);
		
		List<User> users = pageData.getContent();
		users.forEach(user -> {
			System.out.println(user);
		});



======================
Query By Example (QBE)
=====================

-> It is used to prepare the query dynamically

-> To implement Dynamic Search Option we can use QBE concept


		User entity  = new User();
		
		entity.setCountry("India");
		entity.setAge(25);
		
		Example<User> example = Example.of(entity);
		
		List<User> users = repository.findAll(example);
		
		users.forEach(user -> {
			System.out.println(user);
		});



=========================
Timestamping in Data JPA
==========================

-> For every table we need to maintain below 4 columns to analyze data


CREATED_DATE  
CREATED_BY

UPDATED_DATE
UPDATED_BY

Note: In realtime we will maintain these 4 columns for every table

-> CREATED_BY & UPDATED_BY represents which user creating and updating records in table. In Web applications we will use logged in username and we will set for these 2 columns.

-> CREATED_DATE & UPDATED_DATE columns represents when record got created and when record got updated.

-> Instead of setting CREATED_DATE & UPDATE_DATE columns values manually we can below annotations

1) @CreationTimestamp

2) @UpdateTimestamp

++++++++++++++++++++++++++++++++Example+++++++++++++++++++++++++++++++++++++++++++++++++++++

@Data
@Entity
@Table(name = "PRODUCT_MASTER")
public class Product {

	@Id
	@Column(name = "PRODUCT_ID")
	private Integer pid;

	@Column(name = "PRODUCT_NAME")
	private String pname;

	@Column(name = "PRODUCT_PRICE")
	private Double price;

	@CreationTimestamp
	@Column(name = "CREATED_DATE", updatable = false)
	private LocalDateTime createdDate;

	@UpdateTimestamp
	@Column(name = "UPDATED_DATE", insertable = false)
	private LocalDateTime updatedDate;

}

-> updatable = false means that column value should not updated when we do update operation on the table.

-> insertable = false means that column value should not inserted when we do insert operation on the table.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Q ) Why to use Wrapper classes instead of Primitive datatypes in Entity class ?

-> Primitive data types will take default values when we dont set the value for variable

Ex : if we take 'price variable with double data type' then it will insert price as '0' if we don't set price for the record. It is not recommended.

-> If we take wrapper classes it will consider 'null' as default value when we don't set value for a variable.


++++++++++++
Primary Keys
+++++++++++

-> Primary Key is a constraint (rule)

-> Primary constraint is the combination of below 2 constraints

1) UNIQUE

2) NOT NULL

-> When we use PRIMARY KEY constraint for a column then that column value shouldn't be null and it should be unique.

-> It is not recommended to set values for Primary Key columns manually

-> We will use Generators to generate the value for primary key column

-> To use Generator we will specify @GeneratedValue annotation


-> In MYSQL Database we will use auto_increment to generate value for primary key. To specify auto_increment we will use IDENTITY generator.

	@Id
	@Column(name = "PRODUCT_ID")
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer pid;

-> In Oracle database we will use sequence concept to generate value for primary key column. For every primary key one sequence will be created in database

Ex:
create sequence product_id_seq
start with 101
increment by 1;


-> If we want to generate primary key column value like below then we should go for Custom Generator (Our own Generator we have to develop)

TCS01
TCS02
TCS03
TCS04

-> Custom Generator Example : https://youtu.be/IijGVtT9ZPk


+++++++++++++++++++++
Composite Primary Keys
++++++++++++++++++++

-> Table can have more than one primary key column

-> If table contains more than one primary key column then those primary keys are called as Composite Primary Keys


CREATE TABLE ACCOUNTS
(
   ACC_ID  			NUMBER,
   ACC_NUMBER 		NUMBER,
   HOLDER_NAME 		VARCHAR2(50)
   ACC_TYPE 			VARCHAR2(10),
   BRANCH_NAME 		VARCHAR2(10)

   PRIMARY KEY (ACC_ID, ACC_NUMBER, BRANCH_NAME)

)

Note: For Composite Primary Keys we can't use Generator. We have to set values manually



@Data
@Embeddable
public class AccountPK implements Serializable {

	private Integer accId;
	private String accType;
	private String holderName;
}

@Data
@Entity
@Table(name = "BANK_ACCOUNTS")
public class Account {

	@Column(name = "BRANCH_NAME")
	private String branchName;

	@Column(name = "MIN_BAL")
	private Double minBal;

	@EmbeddedId
	private AccountPK accPk;

}

public interface AccountRepository extends JpaRepository<Account, AccountPK> {

}

@Service
public class AccountService {

	private AccountRepository accRepo;

	public AccountService(AccountRepository accRepo) {
		this.accRepo = accRepo;
	}

	public void getDataUsingPK() {

		AccountPK pk = new AccountPK();
		pk.setAccId(101);
		pk.setAccType("CURRENT");
		pk.setHolderName("IBM");

		Optional<Account> findById = accRepo.findById(pk);
		if (findById.isPresent()) {
			System.out.println(findById.get());
		}
	}

	public void saveAccData() {
		AccountPK pk = new AccountPK();
		pk.setAccId(104);
		pk.setAccType("SAVINGS");
		pk.setHolderName("TCS");

		Account acc = new Account();
		acc.setBranchName("Ameerpet");
		acc.setMinBal(5000.00);

		acc.setAccPk(pk); // setting pk class obj to entity obj

		accRepo.save(acc);
	}
}


@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);

		AccountService accountService = context.getBean(AccountService.class);
		accountService.saveAccData();
		accountService.getDataUsingPK();

		context.close();
	}
}


++++++++++++++++++++++++
TX management in Data JPA
++++++++++++++++++++++++

-> Unit amount of work is called as Transaction

-> When we are performing non  select operations (insert/update/delete) we need to deal with Transactions

-> For select operations transaction is not required (Retrieval)

-> In Data JPA  it is care of transaction managment

-> If all operations are successful then we should commit transaction

-> If any operation is failed in the transaction then we need to rollback that transaction

-> When we are working with transactions we need to ACID properties

A - Atomicity

C - Consistence

I - Isolation

D - Durability


-> COMMIT means storing data in database permanently

-> ROLLBACK means bringing database to previous state


++++++++++++++++++++++++++Example for Rollback++++++++++++++++++++++++++++++++

	@Transactional(rollbackFor = Exception.class)
	public void saveData() {

		Employee emp = new Employee();
		emp.setEmpId(201);
		emp.setEmpName("Ketan");
		emp.setEmpSal(25000.00);
		empRepo.save(emp);

		int i = 10 / 0;

		Address addr = new Address();
		addr.setAddrId(501);
		addr.setEmpId(201);
		addr.setCity("Pune");
		addr.setState("MH");
		addr.setCountry("India");
		addrRepo.save(addr);
	}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Requirement : Develop Data JPA Application to insert image file into database table
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

USER_TBL (TABLE NAME)
-------------------------------------

USER_ID			INTEGER		PRIMARY KEY	AUTO_INCREMENT

USER_NAME		VARCHAR

USER_EMAIL		VARCHAR

USER_PHOTO 	BLOB




@Entity
@Table(name = "USER_TBL")
@Data
public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "USER_ID")
	private Integer userId;

	@Column(name = "USER_NAME")
	private String userName;

	@Column(name = "USER_EMAIL")
	private String userEmail;

	@Column(name = "USER_IMAGE")
	@Lob
	private byte[] userImage;

}

public interface UserRepository extends JpaRepository<User, Integer> {

}

@Service
public class UserService {

	@Autowired
	private UserRepository userRepo;

	public void saveUser() throws Exception {

		String imagePath = "give-file-path";

		User user = new User();
		user.setUserName("Suresh");
		user.setUserEmail("suresh@gmail.com");

		long size = Files.size(Paths.get(imagePath));

		byte[] arr = new byte[(int) size];
		FileInputStream fis = new FileInputStream(new File(imagePath));
		fis.read(arr);
		fis.close();

		user.setUserImage(arr);

		userRepo.save(user);
	}
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1) What is Data JPA
2) Advantages of Data JPA
3) Entity class with annotations
4) Repository interface
5) CrudRepository
6) JpaRepository
7) CrudRepository interface methods
8) JpaRepository interface methods
9) Pagination
8) Sorting
9) Query By Example
10) findByXXX methods
11) Custom Queries
12) Native SQL vs HQL
13) How to write HQL queries
14) Dialect class
15) Timestamping
16) Generators
17) Primary Keys
18) Composite Primary keys
19) Tx Rollback
20) Large Object (@Lob)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++